#version 450

#include ./particleinfo.shader
#include ./standard/rand.shader

layout(set = 1, binding = 0) uniform ParticleInfoBuffer
{
    uint ParticleCount;
    vec3 Padding_;
};

layout(set = 2, binding = 0) uniform DrawDeltaBuffer
{
    float DrawDelta;
    vec3 _DrawDeltaBuffer_Padding_;
};

#if hasBoundingBox
    layout(set = 3, binding = 0) uniform ParticleBoundsBoxBuffer
    {
        vec3 BoundingBoxMin;
        float _ParticleBoundsBoxBuffer_padding0;
        vec3 BoundingBoxMax;
        float _ParticleBoundsBoxBuffer_padding1;
    };

    bool isOutOfBounds(vec3 position) 
    {
        return position.x > BoundingBoxMax.x || position.y > BoundingBoxMax.y || position.z > BoundingBoxMax.z || position.x < BoundingBoxMin.x || position.y < BoundingBoxMin.y || position.z < BoundingBoxMin.z;
    }
#elseif hasBoundingSphere
    layout(set = 3, binding = 0) uniform ParticleBoundsSphereBuffer
    {
        vec3 BoundingPosition;
        float BoundingRadius;
    };

    bool isOutOfBounds(vec3 position) 
    {
        return length(BoundingPosition - position) > BoundingRadius;
    }
#else
    bool isOutOfBounds(vec3 position) 
    {
        return false;
    }
#endif

#if hasResetBox
    layout(set = #{resetSet}, binding = 0) uniform ParticleResetBoxBuffer
    {
        vec3 ResetBoxMin;
        float _ParticleResetBoxBuffer_padding0;
        vec3 ResetBoxMax;
        float _ParticleResetBoxBuffer_padding1;
    };

    vec3 resetPosition(vec3 position)
    {
        return vec3(random(position.xy), random(position.yz), random(position.zx)) * (ResetBoxMax - ResetBoxMin) + ResetBoxMin;
    }
#elseif hasResetSphere
    layout(set = #{resetSet}, binding = 0) uniform ParticleResetSphereBuffer
    {
        vec3 ResetPosition;
        float ResetRadius;
    };
    
    vec3 resetPosition(vec3 position)
    {
        vec3 newPosition = vec3(0, 0, 0);
        float radius = 0;
        do
        {
            newPosition = vec3(random(position.xy), random(position.yz), random(position.zx)) * (ResetRadius * 2)  - ResetRadius;
            radius = (newPosition.x * newPosition.x + newPosition.y * newPosition.y + newPosition.z * newPosition.z) / 2;
        } while(radius > ResetRadius);
        return newPosition + ResetPosition;
    }
#elseif hasResetCircle
    layout(set = #{resetSet}, binding = 0) uniform ParticleResetCircleBuffer
    {
        vec3 ResetPosition;
        float ResetRadius;
    };
    
    vec3 resetPosition(vec3 position)
    {
        float radius = ResetRadius * sqrt(random(position.xy));
        float theta = random(position.yz) * 2 * 3.14f;
        float x = ResetPosition.x + radius * cos(theta);
        float z = ResetPosition.z + radius * sin(theta);
        //TODO: make circle up configurable
        return vec3(x, ResetPosition.y, z);
    }
#else
    vec3 resetPosition(vec3 position)
    {
        return vec3(0, 0, 0);
    }
#endif


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index > ParticleCount)
    {
        return;
    }
    
    //TODO: if velocity is done here delta is nessesary as well?
    ParticleInfo particle = Particles[index];
    vec3 position = particle.Position + (particle.Velocity * DrawDelta);
    vec4 color = particle.Color + (particle.ColorModifier * DrawDelta);
    float livetime = particle.Livetime + (particle.LivetimeModifer * DrawDelta);
    vec3 velocity = particle.Velocity + (particle.VelocityModifer * DrawDelta);

    if(livetime <= 0 || isOutOfBounds(position)) 
    {
        position = resetPosition(position);
        color = particle.InitialColor;
        livetime = 1;
        velocity = particle.InitialVelocity;
    }

    Particles[index].Velocity = velocity;
    Particles[index].Livetime = livetime;
    Particles[index].Color = color;
    Particles[index].Position = position;
}
